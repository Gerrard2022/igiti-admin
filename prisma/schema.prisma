generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  pesapalIpnId    String?     // Add this field for PesaPal IPN
  pesapalIpnUrl   String?     // Add this field for PesaPal IPN URL
  billboards     Billboard[] @relation("StoreToBillboard")
  categories     Category[]  @relation("StoreToCategory")
  orders         Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  inStock     Int
  categoryId  String
  createdAt   DateTime    @default(now())
  isArchived  Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  updatedAt   DateTime    @updatedAt
  storeId     String
  description String
  category    Category    @relation(fields: [categoryId], references: [id])
  images      Image[]
  orderItems  OrderItem[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])  
}

model Order {
  id                String           @id @default(uuid())
  storeId           String
  isPaid            Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  isSent            Boolean          @default(false)
  pesapalTrackingId String?         // Add this field for PesaPal tracking
  store             Store            @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems        OrderItem[]
  shippingDetails   ShippingDetails? @relation("OrderToShippingDetails", fields: [shippingDetailsId], references: [id])
  shippingDetailsId String?          @unique

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int      @default(1)
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ShippingDetails {
  id           String   @id @default(uuid())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  country      String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order?   @relation("OrderToShippingDetails")
}
